{"version":3,"file":"index.js","sources":["../src/hooks/useLoadScript.ts","../src/hooks/useLoadGoogleCharts.ts","../src/default-props.ts","../src/generate-unique-id.ts","../src/constants.ts","../src/load-data-table-from-spreadsheet.ts","../src/Context.tsx","../src/components/GoogleChartDataTable.tsx","../src/components/GoogleChartEvents.tsx","../src/components/GoogleChart.tsx","../src/ReactGoogleCharts.tsx","../src/types.ts","../src/index.tsx"],"sourcesContent":["import { useEffect } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(\n  src: string,\n  onLoad?: () => void,\n  onError?: () => void\n) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad?.();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad?.();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n","import { useState, useEffect } from \"react\";\nimport { GoogleChartVersion, GoogleChartPackages, GoogleViz } from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts({\n  chartVersion = \"current\",\n  chartPackages = [\"corechart\", \"controls\"],\n  chartLanguage = \"en\",\n  mapsApiKey,\n}: IUseLoadGoogleChartsParams) {\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [failed, setFailed] = useState(false);\n\n  useLoadScript(\n    \"https://www.gstatic.com/charts/loader.js\",\n    () => {\n      // @ts-expect-error Getting object from global namespace.\n      const google = window?.google as GoogleViz;\n\n      if (!google) {\n        return;\n      }\n\n      google.charts.load(chartVersion, {\n        packages: chartPackages,\n        language: chartLanguage,\n        mapsApiKey,\n      });\n      google.charts.setOnLoadCallback(() => {\n        setGoogleCharts(google);\n      });\n    },\n    () => {\n      setFailed(true);\n    }\n  );\n\n  return [googleCharts, failed] as const;\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nexport function LoadGoogleCharts({\n  onLoad,\n  onError,\n  ...params\n}: ILoadGoogleChartsProps) {\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n\n  return null;\n}\n","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\"\n];\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {}\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\n\nimport { ReactGoogleChartProps } from \"./types\";\nconst { Provider, Consumer } = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const ContextConsumer = ({\n  render,\n}: {\n  render: (context: ReactGoogleChartProps) => JSX.Element | null;\n}) => {\n  return (\n    <Consumer>\n      {(context) => {\n        return render(context as ReactGoogleChartProps);\n      }}\n    </Consumer>\n  );\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleDataTable,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n} from \"../types\";\nimport { DEFAULT_CHART_COLORS } from \"../constants\";\n\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ContextConsumer } from \"../Context\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type GoogleChartDataTableProps = {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  googleChartDashboard: GoogleChartDashboard | null;\n};\ninterface State {\n  hiddenColumns: string[];\n}\nexport class GoogleChartDataTableInner extends React.Component<\n  ReactGoogleChartProps & GoogleChartDataTableProps,\n  State\n> {\n  state = {\n    hiddenColumns: [],\n  } as State;\n\n  private listenToLegendToggle = () => {\n    const { google, googleChartWrapper } = this.props;\n    google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row ||\n          !dataTable\n        ) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [\n              ...state.hiddenColumns.filter((colID) => colID !== columnID),\n            ],\n          }));\n        } else {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID],\n          }));\n        }\n      }\n    );\n  };\n\n  private applyFormatters = (dataTable: GoogleDataTable, formatters: any[]) => {\n    const { google } = this.props;\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options\n          );\n          const { ranges } = formatter;\n          for (let range of ranges) {\n            vizFormatter.addRange(...range);\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n      }\n    }\n  };\n  private getColumnID = (dataTable: GoogleDataTable, columnIndex: number) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n  private draw = async ({\n    data,\n    diffdata,\n    rows,\n    columns,\n    options,\n    legend_toggle,\n    legendToggle,\n    chartType,\n    formatters,\n    spreadSheetUrl,\n    spreadSheetQueryParameters,\n  }: ReactGoogleChartProps) => {\n    const { google, googleChartWrapper } = this.props;\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData\n      );\n    }\n    if (data !== null) {\n      if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n    for (let i = 0; i < columnCount; i += 1) {\n      const columnID = this.getColumnID(dataTable, i);\n      if (this.state.hiddenColumns.includes(columnID)) {\n        const previousColumnLabel = dataTable.getColumnLabel(i);\n        const previousColumnID = dataTable.getColumnId(i);\n        const previousColumnType = dataTable.getColumnType(i);\n        dataTable.removeColumn(i);\n        dataTable.addColumn({\n          label: previousColumnLabel,\n          id: previousColumnID,\n          type: previousColumnType,\n        });\n      }\n    }\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    googleChartWrapper.setDataTable(dataTable);\n    googleChartWrapper.draw();\n    if (this.props.googleChartDashboard !== null) {\n      this.props.googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumns({ options });\n    }\n    return;\n  };\n  private grayOutHiddenColumns = ({\n    options,\n  }: {\n    options: ReactGoogleChartProps[\"options\"];\n  }) => {\n    const { googleChartWrapper } = this.props;\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      }\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  private onResize = () => {\n    const { googleChartWrapper } = this.props;\n    googleChartWrapper.draw();\n  };\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const { google, googleChartWrapper } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n}\n\nexport class GoogleChartDataTable extends React.Component<GoogleChartDataTableProps> {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const { google, googleChartWrapper, googleChartDashboard } = this.props;\n    return (\n      <ContextConsumer\n        render={(props) => {\n          return (\n            <GoogleChartDataTableInner\n              {...props}\n              google={google}\n              googleChartWrapper={googleChartWrapper}\n              googleChartDashboard={googleChartDashboard}\n            />\n          );\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  ReactGoogleChartEvent,\n} from \"../types\";\n\nimport { ContextConsumer } from \"../Context\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport interface Props {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n}\n\nexport interface ListenToEventsArgs {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  chartEvents: ReactGoogleChartEvent[] | null;\n}\n\nexport class GoogleChartEvents extends React.Component<Props> {\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents({\n    chartEvents,\n    google,\n    googleChartWrapper,\n  }: ListenToEventsArgs) {\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      const { eventName, callback } = event;\n      google.visualization.events.addListener(\n        googleChartWrapper,\n        eventName,\n        (...args: any[]) => {\n          callback({\n            chartWrapper: googleChartWrapper,\n            props: this.props as any,\n            google: google,\n            eventArgs: args,\n          });\n        }\n      );\n    }\n  }\n  render() {\n    const { google, googleChartWrapper } = this.props;\n    return (\n      <ContextConsumer\n        render={(propsFromContext) => {\n          this.listenToEvents({\n            chartEvents: propsFromContext.chartEvents || null,\n            google,\n            googleChartWrapper,\n          });\n          return null;\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\nimport { GoogleChartDataTable } from \"./GoogleChartDataTable\";\nimport { GoogleChartEvents } from \"./GoogleChartEvents\";\n\nexport type Props = {\n  google: GoogleViz;\n  graphID?: string | null;\n  graph_id?: string | null;\n  options?: ReactGoogleChartProps[\"options\"];\n  chartWrapperParams?: {};\n  chartType: ReactGoogleChartProps[\"chartType\"];\n  width?: ReactGoogleChartProps[\"width\"];\n  height?: ReactGoogleChartProps[\"height\"];\n  style?: ReactGoogleChartProps[\"style\"];\n  className?: ReactGoogleChartProps[\"className\"];\n  rootProps?: ReactGoogleChartProps[\"rootProps\"];\n} & ReactGoogleChartProps;\n\nexport interface State {\n  googleChartWrapper: GoogleChartWrapper | null;\n  isReady: boolean;\n  googleChartDashboard: GoogleChartDashboard | null;\n  googleChartEditor: GoogleChartEditor | null;\n  googleChartControls:\n    | { control: GoogleChartControl; controlProp: GoogleChartControlProp }[]\n    | null;\n}\n\nlet controlCounter = 0;\n\nexport class GoogleChart extends React.Component<Props, State> {\n  state = {\n    googleChartWrapper: null,\n    googleChartDashboard: null,\n    googleChartControls: null,\n    googleChartEditor: null,\n    isReady: false,\n  } as State;\n  graphID: null | string = null;\n  private dashboard_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private toolbar_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private getGraphID = () => {\n    const { graphID, graph_id } = this.props;\n    let instanceGraphID: string;\n    if (!graphID && !graph_id) {\n      if (!this.graphID) {\n        instanceGraphID = generateUniqueID();\n      } else {\n        instanceGraphID = this.graphID;\n      }\n    } else if (graphID && !graph_id) {\n      instanceGraphID = graphID as string;\n    } else if (graph_id && !graphID) {\n      instanceGraphID = graph_id as string;\n    } else {\n      instanceGraphID = graphID as string;\n    }\n    this.graphID = instanceGraphID;\n    return this.graphID as string;\n  };\n  private getControlID = (id: undefined | string, index: number) => {\n    controlCounter += 1;\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${index}-${controlCounter}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  addControls = (\n    googleChartWrapper: GoogleChartWrapper,\n    googleChartDashboard: GoogleChartDashboard\n  ) => {\n    const { google, controls } = this.props;\n\n    const googleChartControls = !controls\n      ? null\n      : controls.map((control, i) => {\n          const {\n            controlID: controlIDMaybe,\n            controlType,\n            options: controlOptions,\n            controlWrapperParams,\n          } = control;\n          const controlID = this.getControlID(controlIDMaybe, i);\n          return {\n            controlProp: control,\n            control: new google.visualization.ControlWrapper({\n              containerId: controlID,\n              controlType,\n              options: controlOptions,\n              ...controlWrapperParams,\n            }),\n          };\n        });\n    if (!googleChartControls) {\n      return null;\n    }\n    googleChartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      googleChartWrapper\n    );\n    for (let chartControl of googleChartControls) {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      for (let event of controlEvents) {\n        const { callback, eventName } = event;\n        google.visualization.events.removeListener(\n          control,\n          eventName,\n          callback\n        );\n        google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args: any[]) => {\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: this.props as any,\n              google: google,\n              eventArgs: args,\n            });\n          }\n        );\n      }\n    }\n    return googleChartControls;\n  };\n\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n    } = this.props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams,\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(\n      chartConfig\n    );\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(\n      this.dashboard_ref\n    );\n\n    const googleChartControls = this.addControls(\n      googleChartWrapper,\n      googleChartDashboard\n    );\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        this.toolbar_ref.current as HTMLDivElement,\n        toolbarItems\n      );\n    }\n    let googleChartEditor: null | GoogleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google,\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true,\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n\n    const { controls } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const { controlType, options, controlWrapperParams } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(\n            controlWrapperParams[\"state\"]\n          );\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      this.state.isReady !== nextState.isReady ||\n      nextProps.controls !== this.props.controls\n    );\n  }\n  renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div\n        id={this.getGraphID()}\n        style={divStyle}\n        className={className}\n        {...rootProps}\n      >\n        {this.state.isReady && this.state.googleChartWrapper !== null ? (\n          <React.Fragment>\n            <GoogleChartDataTable\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n              googleChartDashboard={this.state.googleChartDashboard}\n            />\n            <GoogleChartEvents\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n            />\n          </React.Fragment>\n        ) : null}\n      </div>\n    );\n  };\n  renderControl = (\n    filter = ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => true\n  ) => {\n    return this.state.isReady && this.state.googleChartControls !== null ? (\n      <React.Fragment>\n        {this.state.googleChartControls\n          .filter(({ controlProp, control }) => {\n            return filter({ control, controlProp });\n          })\n          .map(({ control, controlProp }) => {\n            return (\n              <div\n                key={control.getContainerId()}\n                id={control.getContainerId()}\n              />\n            );\n          })}\n      </React.Fragment>\n    ) : null;\n  };\n  renderToolBar = () => {\n    if (!this.props.toolbarItems) return null;\n    return <div ref={this.toolbar_ref} />;\n  };\n  render() {\n    const { width, height, options, style } = this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    if (this.props.render) {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          <div ref={this.toolbar_ref} id=\"toolbar\" />\n          {this.props.render({\n            renderChart: this.renderChart,\n            renderControl: this.renderControl,\n            renderToolbar: this.renderToolBar,\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition !== \"bottom\";\n          })}\n          {this.renderChart()}\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition === \"bottom\";\n          })}\n          {this.renderToolBar()}\n        </div>\n      );\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  ReactGoogleChartState,\n} from \"./types\";\nimport { LoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\nexport class Chart extends React.Component<\n  ReactGoogleChartProps,\n  ReactGoogleChartState\n> {\n  _isMounted = false;\n\n  state = {\n    loadingStatus: \"loading\" as ReactGoogleChartState[\"loadingStatus\"],\n    google: null as ReactGoogleChartState[\"google\"],\n  };\n\n  static defaultProps = chartDefaultProps;\n\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement,\n    } = this.props;\n    return (\n      <ContextProvider value={this.props as ReactGoogleChartProps}>\n        {this.state.loadingStatus === \"ready\" && this.state.google !== null ? (\n          <GoogleChart\n            {...(this.props as ReactGoogleChartProps)}\n            google={this.state.google}\n          />\n        ) : this.state.loadingStatus === \"errored\" && errorElement ? (\n          errorElement\n        ) : (\n          loader\n        )}\n        <LoadGoogleCharts\n          chartLanguage={chartLanguage}\n          chartPackages={chartPackages}\n          chartVersion={chartVersion}\n          mapsApiKey={mapsApiKey}\n          onLoad={this.onLoad}\n          onError={this.onError}\n        />\n      </ContextProvider>\n    );\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onLoad = (google: GoogleViz) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(google);\n    }\n    if (this.isFullyLoaded(google)) {\n      this.onSuccess(google);\n    } else {\n      // IE11: window.google is not fully set, we have to wait\n      const id = setInterval(() => {\n        const google = (\n          window as Window & {\n            google?: GoogleViz;\n          }\n        ).google;\n\n        if (this._isMounted) {\n          if (google && this.isFullyLoaded(google)) {\n            clearInterval(id);\n            this.onSuccess(google);\n          }\n        } else {\n          clearInterval(id);\n        }\n      }, 1000);\n    }\n  };\n\n  onSuccess = (google: GoogleViz) => {\n    this.setState({\n      loadingStatus: \"ready\",\n      google,\n    });\n  };\n\n  onError = () => {\n    this.setState({\n      loadingStatus: \"errored\",\n    });\n  };\n\n  isFullyLoaded(google: GoogleViz) {\n    const { controls, toolbarItems, getChartEditor } = this.props;\n\n    return (\n      google &&\n      google.visualization &&\n      google.visualization.ChartWrapper &&\n      google.visualization.Dashboard &&\n      (!controls || google.visualization.ChartWrapper) &&\n      (!getChartEditor || google.visualization.ChartEditor) &&\n      (!toolbarItems || google.visualization.drawToolbar)\n    );\n  }\n}\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[]\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: { dataSourceInput?: any; [otherKeyMaybe: string]: any }\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor: string;\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any\n  ) => any;\n  removeListener: (\n    chartWrapper: GoogleChartWrapper,\n    name: GoogleVizEventName,\n    callback: Function\n  ) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\";\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {}\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: string) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redFrom?: number;\n  redTo?: number;\n  yellowFrom?: number;\n  yellowTo?: number;\n  minorTicks?: number;\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (google: GoogleViz) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: {\n    column: number | number[];\n    type:\n      | \"ArrowFormat\"\n      | \"BarFormat\"\n      | \"ColorFormat\"\n      | \"DateFormat\"\n      | \"NumberFormat\"\n      | \"PatternFormat\";\n    options?: {};\n  }[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n","import { Chart } from \"./ReactGoogleCharts\";\n\nexport * from \"./types\";\nexport { Chart };\nexport default Chart;\n"],"names":["useLoadScript","src","onLoad","onError","useEffect","document","foundScript","querySelector","dataset","loaded","script","createElement","onLoadWithMarker","addEventListener","head","append","removeEventListener","useLoadGoogleCharts","chartVersion","chartPackages","chartLanguage","mapsApiKey","googleCharts","setGoogleCharts","useState","failed","setFailed","google","window","charts","load","packages","language","setOnLoadCallback","LoadGoogleCharts","params","chartDefaultProps","legend_toggle","options","legendToggle","getChartWrapper","spreadSheetQueryParameters","headers","gid","rootProps","chartWrapperParams","uniqueID","generateUniqueID","DEFAULT_CHART_COLORS","loadDataTableFromSpreadSheet","googleViz","spreadSheetUrl","urlParams","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlQueryString","urlToSpreadSheet","visualization","Query","send","response","isError","getMessage","getDetailedMessage","getDataTable","Provider","Consumer","React","createContext","ContextProvider","children","value","ContextConsumer","render","context","GRAY_COLOR","GoogleChartDataTableInner","Component","componentDidMount","draw","props","onResize","listenToLegendToggle","componentWillUnmount","googleChartWrapper","events","removeAllListeners","getChartType","getChart","clearChart","componentDidUpdate","state","hiddenColumns","addListener","chart","selection","getSelection","dataTable","length","row","columnIndex","column","columnID","getColumnID","includes","setState","filter","colID","applyFormatters","formatters","formatter","type","vizFormatter","ArrowFormat","format","BarFormat","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","getColumnId","getColumnLabel","data","diffdata","rows","columns","chartType","chartDiff","oldData","arrayToDataTable","old","newData","new","prototype","computeDiff","Array","isArray","DataTable","columnCount","getNumberOfColumns","i","previousColumnLabel","previousColumnID","previousColumnType","getColumnType","removeColumn","addColumn","label","id","setChartType","setOptions","setDataTable","googleChartDashboard","grayOutHiddenColumns","hasAHiddenColumn","colors","from","map","dontcare","GoogleChartDataTable","shouldComponentUpdate","GoogleChartEvents","listenToEvents","chartEvents","event","eventName","callback","args","chartWrapper","eventArgs","propsFromContext","controlCounter","GoogleChart","toolbarItems","getChartEditor","chartConfig","containerId","getGraphID","ChartWrapper","Dashboard","dashboard_ref","googleChartControls","addControls","drawToolbar","toolbar_ref","current","googleChartEditor","ChartEditor","chartEditor","isReady","controls","controlType","controlWrapperParams","control","setControlType","nextProps","nextState","width","height","style","divStyle","div","ref","renderChart","renderControl","renderToolbar","renderToolBar","controlProp","controlPosition","graphID","createRef","graph_id","instanceGraphID","getControlID","index","controlID","controlIDMaybe","controlOptions","ControlWrapper","bind","chartControl","controlEvents","removeListener","controlWrapper","className","Fragment","key","getContainerId","Chart","loader","errorElement","loadingStatus","_isMounted","isFullyLoaded","onSuccess","setInterval","clearInterval","defaultProps","GoogleDataTableColumnRoleType","annotation","annotationText","certainty","emphasis","interval","scope","tooltip","domain"],"mappings":"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"}