{"ast":null,"code":"import * as React from 'react';\nimport { useEffect, useState } from 'react';\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\n\nfunction useLoadScript(src, onLoad, onError) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    } // Find script tag with same src in DOM.\n\n\n    const foundScript = document.querySelector(\"script[src=\\\"\".concat(src, \"\\\"]\")); // Call onLoad if script marked as loaded.\n\n    if (foundScript === null || foundScript === void 0 ? void 0 : foundScript.dataset.loaded) {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n      return;\n    } // Create or get existed tag.\n\n\n    const script = foundScript || document.createElement(\"script\"); // Set src if no script was found.\n\n    if (!foundScript) {\n      script.src = src;\n    } // Mark script as loaded on load event.\n\n\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    } // Add to DOM if not yet added.\n\n\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\n\n\nfunction useLoadGoogleCharts(param) {\n  let {\n    chartVersion = \"current\",\n    chartPackages = [\"corechart\", \"controls\"],\n    chartLanguage = \"en\",\n    mapsApiKey\n  } = param;\n  const [googleCharts, setGoogleCharts] = useState(null);\n  const [failed, setFailed] = useState(false);\n  useLoadScript(\"https://www.gstatic.com/charts/loader.js\", () => {\n    // @ts-expect-error Getting object from global namespace.\n    const google = window === null || window === void 0 ? void 0 : window.google;\n\n    if (!google) {\n      return;\n    }\n\n    google.charts.load(chartVersion, {\n      packages: chartPackages,\n      language: chartLanguage,\n      mapsApiKey\n    });\n    google.charts.setOnLoadCallback(() => {\n      setGoogleCharts(google);\n    });\n  }, () => {\n    setFailed(true);\n  });\n  return [googleCharts, failed];\n}\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\n\n\nfunction LoadGoogleCharts(param) {\n  let {\n    onLoad,\n    onError,\n    ...params\n  } = param;\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n  return null;\n}\n\nconst chartDefaultProps = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1\n  },\n  rootProps: {},\n  chartWrapperParams: {}\n};\nlet uniqueID = 0;\n\nconst generateUniqueID = () => {\n  uniqueID += 1;\n  return \"reactgooglegraph-\".concat(uniqueID);\n};\n\nconst DEFAULT_CHART_COLORS = [\"#3366CC\", \"#DC3912\", \"#FF9900\", \"#109618\", \"#990099\", \"#3B3EAC\", \"#0099C6\", \"#DD4477\", \"#66AA00\", \"#B82E2E\", \"#316395\", \"#994499\", \"#22AA99\", \"#AAAA11\", \"#6633CC\", \"#E67300\", \"#8B0707\", \"#329262\", \"#5574A6\", \"#3B3EAC\"];\n\nconst loadDataTableFromSpreadSheet = async function (googleViz, spreadSheetUrl) {\n  let urlParams = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n  return new Promise((resolve, reject) => {\n    const headers = \"\".concat(urlParams.headers ? \"headers=\".concat(urlParams.headers) : \"headers=0\");\n    const queryString = \"\".concat(urlParams.query ? \"&tq=\".concat(encodeURIComponent(urlParams.query)) : \"\");\n    const gid = \"\".concat(urlParams.gid ? \"&gid=\".concat(urlParams.gid) : \"\");\n    const sheet = \"\".concat(urlParams.sheet ? \"&sheet=\".concat(urlParams.sheet) : \"\");\n    const access_token = \"\".concat(urlParams.access_token ? \"&access_token=\".concat(urlParams.access_token) : \"\");\n    const urlQueryString = \"\".concat(headers).concat(gid).concat(sheet).concat(queryString).concat(access_token);\n    const urlToSpreadSheet = \"\".concat(spreadSheetUrl, \"/gviz/tq?\").concat(urlQueryString); //&tq=${queryString}`;\n\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send(response => {\n      if (response.isError()) {\n        reject(\"Error in query:  \".concat(response.getMessage(), \" \").concat(response.getDetailedMessage()));\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n\nconst {\n  Provider,\n  Consumer\n} = /*#__PURE__*/React.createContext(chartDefaultProps);\n\nconst ContextProvider = param => {\n  let {\n    children,\n    value\n  } = param;\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: value\n  }, children);\n};\n\nconst ContextConsumer = param => {\n  let {\n    render\n  } = param;\n  return /*#__PURE__*/React.createElement(Consumer, null, context => {\n    return render(context);\n  });\n};\n\nconst GRAY_COLOR = \"#CCCCCC\";\n\nclass GoogleChartDataTableInner extends React.Component {\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      google,\n      googleChartWrapper\n    } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() && googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n\n  render() {\n    return null;\n  }\n\n  constructor() {\n    super(...arguments);\n    this.state = {\n      hiddenColumns: []\n    };\n\n    this.listenToLegendToggle = () => {\n      const {\n        google,\n        googleChartWrapper\n      } = this.props;\n      google.visualization.events.addListener(googleChartWrapper, \"select\", () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n\n        if (selection.length === 0 || // We want to listen to when a whole row is selected. This is the case only when row === null\n        selection[0].row || !dataTable) {\n          return;\n        }\n\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState(state => ({ ...state,\n            hiddenColumns: [...state.hiddenColumns.filter(colID => colID !== columnID)]\n          }));\n        } else {\n          this.setState(state => ({ ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID]\n          }));\n        }\n      });\n    };\n\n    this.applyFormatters = (dataTable, formatters) => {\n      const {\n        google\n      } = this.props;\n\n      for (let formatter of formatters) {\n        switch (formatter.type) {\n          case \"ArrowFormat\":\n            {\n              const vizFormatter = new google.visualization.ArrowFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n\n          case \"BarFormat\":\n            {\n              const vizFormatter = new google.visualization.BarFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n\n          case \"ColorFormat\":\n            {\n              const vizFormatter = new google.visualization.ColorFormat(formatter.options);\n              const {\n                ranges\n              } = formatter;\n\n              for (let range of ranges) {\n                vizFormatter.addRange(...range);\n              }\n\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n\n          case \"DateFormat\":\n            {\n              const vizFormatter = new google.visualization.DateFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n\n          case \"NumberFormat\":\n            {\n              const vizFormatter = new google.visualization.NumberFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n\n          case \"PatternFormat\":\n            {\n              const vizFormatter = new google.visualization.PatternFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n        }\n      }\n    };\n\n    this.getColumnID = (dataTable, columnIndex) => {\n      return dataTable.getColumnId(columnIndex) || dataTable.getColumnLabel(columnIndex);\n    };\n\n    this.draw = async param => {\n      let {\n        data,\n        diffdata,\n        rows,\n        columns,\n        options,\n        legend_toggle,\n        legendToggle,\n        chartType,\n        formatters,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      } = param;\n      const {\n        google,\n        googleChartWrapper\n      } = this.props;\n      let dataTable;\n      let chartDiff = null;\n\n      if (diffdata) {\n        const oldData = google.visualization.arrayToDataTable(diffdata.old);\n        const newData = google.visualization.arrayToDataTable(diffdata.new);\n        chartDiff = google.visualization[chartType].prototype.computeDiff(oldData, newData);\n      }\n\n      if (data !== null) {\n        if (Array.isArray(data)) {\n          dataTable = google.visualization.arrayToDataTable(data);\n        } else {\n          dataTable = new google.visualization.DataTable(data);\n        }\n      } else if (rows && columns) {\n        dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n      } else if (spreadSheetUrl) {\n        dataTable = await loadDataTableFromSpreadSheet(google, spreadSheetUrl, spreadSheetQueryParameters);\n      } else {\n        dataTable = google.visualization.arrayToDataTable([]);\n      }\n\n      const columnCount = dataTable.getNumberOfColumns();\n\n      for (let i = 0; i < columnCount; i += 1) {\n        const columnID = this.getColumnID(dataTable, i);\n\n        if (this.state.hiddenColumns.includes(columnID)) {\n          const previousColumnLabel = dataTable.getColumnLabel(i);\n          const previousColumnID = dataTable.getColumnId(i);\n          const previousColumnType = dataTable.getColumnType(i);\n          dataTable.removeColumn(i);\n          dataTable.addColumn({\n            label: previousColumnLabel,\n            id: previousColumnID,\n            type: previousColumnType\n          });\n        }\n      }\n\n      const chart = googleChartWrapper.getChart();\n\n      if (googleChartWrapper.getChartType() === \"Timeline\") {\n        chart && chart.clearChart();\n      }\n\n      googleChartWrapper.setChartType(chartType);\n      googleChartWrapper.setOptions(options || {});\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n\n      if (this.props.googleChartDashboard !== null) {\n        this.props.googleChartDashboard.draw(dataTable);\n      }\n\n      if (chartDiff) {\n        googleChartWrapper.setDataTable(chartDiff);\n        googleChartWrapper.draw();\n      }\n\n      if (formatters) {\n        this.applyFormatters(dataTable, formatters);\n        googleChartWrapper.setDataTable(dataTable);\n        googleChartWrapper.draw();\n      }\n\n      if (legendToggle === true || legend_toggle === true) {\n        this.grayOutHiddenColumns({\n          options\n        });\n      }\n\n      return;\n    };\n\n    this.grayOutHiddenColumns = param => {\n      let {\n        options\n      } = param;\n      const {\n        googleChartWrapper\n      } = this.props;\n      const dataTable = googleChartWrapper.getDataTable();\n      if (!dataTable) return;\n      const columnCount = dataTable.getNumberOfColumns();\n      const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n      if (hasAHiddenColumn === false) return;\n      const colors = Array.from({\n        length: columnCount - 1\n      }).map((dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      });\n      googleChartWrapper.setOptions({ ...options,\n        colors\n      });\n      googleChartWrapper.draw();\n    };\n\n    this.onResize = () => {\n      const {\n        googleChartWrapper\n      } = this.props;\n      googleChartWrapper.draw();\n    };\n  }\n\n}\n\nclass GoogleChartDataTable extends React.Component {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  render() {\n    const {\n      google,\n      googleChartWrapper,\n      googleChartDashboard\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ContextConsumer, {\n      render: props => {\n        return /*#__PURE__*/React.createElement(GoogleChartDataTableInner, Object.assign({}, props, {\n          google: google,\n          googleChartWrapper: googleChartWrapper,\n          googleChartDashboard: googleChartDashboard\n        }));\n      }\n    });\n  }\n\n}\n\nclass GoogleChartEvents extends React.Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  listenToEvents(param) {\n    let {\n      chartEvents,\n      google,\n      googleChartWrapper\n    } = param;\n\n    if (!chartEvents) {\n      return;\n    }\n\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n\n    for (let event of chartEvents) {\n      var _this = this;\n\n      const {\n        eventName,\n        callback\n      } = event;\n      google.visualization.events.addListener(googleChartWrapper, eventName, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        callback({\n          chartWrapper: googleChartWrapper,\n          props: _this.props,\n          google: google,\n          eventArgs: args\n        });\n      });\n    }\n  }\n\n  render() {\n    const {\n      google,\n      googleChartWrapper\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ContextConsumer, {\n      render: propsFromContext => {\n        this.listenToEvents({\n          chartEvents: propsFromContext.chartEvents || null,\n          google,\n          googleChartWrapper\n        });\n        return null;\n      }\n    });\n  }\n\n}\n\nlet controlCounter = 0;\n\nclass GoogleChart extends React.Component {\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper\n    } = this.props;\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(chartConfig);\n    googleChartWrapper.setOptions(options || {});\n\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n\n    const googleChartDashboard = new google.visualization.Dashboard(this.dashboard_ref);\n    const googleChartControls = this.addControls(googleChartWrapper, googleChartDashboard);\n\n    if (toolbarItems) {\n      google.visualization.drawToolbar(this.toolbar_ref.current, toolbarItems);\n    }\n\n    let googleChartEditor = null;\n\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true\n    });\n  }\n\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n    const {\n      controls\n    } = this.props;\n\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const {\n          controlType,\n          options,\n          controlWrapperParams\n        } = controls[i];\n\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n        }\n\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state.isReady !== nextState.isReady || nextProps.controls !== this.props.controls;\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      options,\n      style\n    } = this.props;\n    const divStyle = {\n      height: height || options && options.height,\n      width: width || options && options.width,\n      ...style\n    };\n\n    if (this.props.render) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.dashboard_ref,\n        style: divStyle\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.toolbar_ref,\n        id: \"toolbar\"\n      }), this.props.render({\n        renderChart: this.renderChart,\n        renderControl: this.renderControl,\n        renderToolbar: this.renderToolBar\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.dashboard_ref,\n        style: divStyle\n      }, this.renderControl(param => {\n        let {\n          controlProp\n        } = param;\n        return controlProp.controlPosition !== \"bottom\";\n      }), this.renderChart(), this.renderControl(param => {\n        let {\n          controlProp\n        } = param;\n        return controlProp.controlPosition === \"bottom\";\n      }), this.renderToolBar());\n    }\n  }\n\n  constructor() {\n    for (var _len2 = arguments.length, args1 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args1[_key2] = arguments[_key2];\n    }\n\n    var _this1;\n\n    super(), _this1 = this;\n    this.state = {\n      googleChartWrapper: null,\n      googleChartDashboard: null,\n      googleChartControls: null,\n      googleChartEditor: null,\n      isReady: false\n    };\n    this.graphID = null;\n    this.dashboard_ref = /*#__PURE__*/React.createRef();\n    this.toolbar_ref = /*#__PURE__*/React.createRef();\n\n    this.getGraphID = () => {\n      const {\n        graphID,\n        graph_id\n      } = this.props;\n      let instanceGraphID;\n\n      if (!graphID && !graph_id) {\n        if (!this.graphID) {\n          instanceGraphID = generateUniqueID();\n        } else {\n          instanceGraphID = this.graphID;\n        }\n      } else if (graphID && !graph_id) {\n        instanceGraphID = graphID;\n      } else if (graph_id && !graphID) {\n        instanceGraphID = graph_id;\n      } else {\n        instanceGraphID = graphID;\n      }\n\n      this.graphID = instanceGraphID;\n      return this.graphID;\n    };\n\n    this.getControlID = (id, index) => {\n      controlCounter += 1;\n      let controlID;\n\n      if (typeof id === \"undefined\") {\n        controlID = \"googlechart-control-\".concat(index, \"-\").concat(controlCounter);\n      } else {\n        controlID = id;\n      }\n\n      return controlID;\n    };\n\n    this.addControls = (googleChartWrapper, googleChartDashboard) => {\n      const {\n        google,\n        controls\n      } = this.props;\n      const googleChartControls = !controls ? null : controls.map((control, i) => {\n        const {\n          controlID: controlIDMaybe,\n          controlType,\n          options: controlOptions,\n          controlWrapperParams\n        } = control;\n        const controlID = this.getControlID(controlIDMaybe, i);\n        return {\n          controlProp: control,\n          control: new google.visualization.ControlWrapper({\n            containerId: controlID,\n            controlType,\n            options: controlOptions,\n            ...controlWrapperParams\n          })\n        };\n      });\n\n      if (!googleChartControls) {\n        return null;\n      }\n\n      googleChartDashboard.bind(googleChartControls.map(param => {\n        let {\n          control\n        } = param;\n        return control;\n      }), googleChartWrapper);\n\n      for (let chartControl of googleChartControls) {\n        const {\n          control,\n          controlProp\n        } = chartControl;\n        const {\n          controlEvents = []\n        } = controlProp;\n\n        for (let event of controlEvents) {\n          var _this = this;\n\n          const {\n            callback,\n            eventName\n          } = event;\n          google.visualization.events.removeListener(control, eventName, callback);\n          google.visualization.events.addListener(control, eventName, function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: _this.props,\n              google: google,\n              eventArgs: args\n            });\n          });\n        }\n      }\n\n      return googleChartControls;\n    };\n\n    this.renderChart = () => {\n      const {\n        width,\n        height,\n        options,\n        style,\n        className,\n        rootProps,\n        google\n      } = this.props;\n      const divStyle = {\n        height: height || options && options.height,\n        width: width || options && options.width,\n        ...style\n      };\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        id: this.getGraphID(),\n        style: divStyle,\n        className: className\n      }, rootProps), this.state.isReady && this.state.googleChartWrapper !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GoogleChartDataTable, {\n        googleChartWrapper: this.state.googleChartWrapper,\n        google: google,\n        googleChartDashboard: this.state.googleChartDashboard\n      }), /*#__PURE__*/React.createElement(GoogleChartEvents, {\n        googleChartWrapper: this.state.googleChartWrapper,\n        google: google\n      })) : null);\n    };\n\n    this.renderControl = function () {\n      let filter = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : param => {\n        return true;\n      };\n      return _this1.state.isReady && _this1.state.googleChartControls !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, _this1.state.googleChartControls.filter(param => {\n        let {\n          controlProp,\n          control\n        } = param;\n        return filter({\n          control,\n          controlProp\n        });\n      }).map(param => {\n        let {\n          control,\n          controlProp\n        } = param;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: control.getContainerId(),\n          id: control.getContainerId()\n        });\n      })) : null;\n    };\n\n    this.renderToolBar = () => {\n      if (!this.props.toolbarItems) return null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.toolbar_ref\n      });\n    };\n  }\n\n}\n\nclass Chart$1 extends React.Component {\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ContextProvider, {\n      value: this.props\n    }, this.state.loadingStatus === \"ready\" && this.state.google !== null ? /*#__PURE__*/React.createElement(GoogleChart, Object.assign({}, this.props, {\n      google: this.state.google\n    })) : this.state.loadingStatus === \"errored\" && errorElement ? errorElement : loader, /*#__PURE__*/React.createElement(LoadGoogleCharts, {\n      chartLanguage: chartLanguage,\n      chartPackages: chartPackages,\n      chartVersion: chartVersion,\n      mapsApiKey: mapsApiKey,\n      onLoad: this.onLoad,\n      onError: this.onError\n    }));\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  isFullyLoaded(google) {\n    const {\n      controls,\n      toolbarItems,\n      getChartEditor\n    } = this.props;\n    return google && google.visualization && google.visualization.ChartWrapper && google.visualization.Dashboard && (!controls || google.visualization.ChartWrapper) && (!getChartEditor || google.visualization.ChartEditor) && (!toolbarItems || google.visualization.drawToolbar);\n  }\n\n  constructor() {\n    super(...arguments);\n    this._isMounted = false;\n    this.state = {\n      loadingStatus: \"loading\",\n      google: null\n    };\n\n    this.onLoad = google1 => {\n      if (this.props.onLoad) {\n        this.props.onLoad(google1);\n      }\n\n      if (this.isFullyLoaded(google1)) {\n        this.onSuccess(google1);\n      } else {\n        // IE11: window.google is not fully set, we have to wait\n        const id = setInterval(() => {\n          const google = window.google;\n\n          if (this._isMounted) {\n            if (google && this.isFullyLoaded(google)) {\n              clearInterval(id);\n              this.onSuccess(google);\n            }\n          } else {\n            clearInterval(id);\n          }\n        }, 1000);\n      }\n    };\n\n    this.onSuccess = google => {\n      this.setState({\n        loadingStatus: \"ready\",\n        google\n      });\n    };\n\n    this.onError = () => {\n      this.setState({\n        loadingStatus: \"errored\"\n      });\n    };\n  }\n\n}\n\nChart$1.defaultProps = chartDefaultProps;\nvar GoogleDataTableColumnRoleType;\n\n(function (GoogleDataTableColumnRoleType) {\n  GoogleDataTableColumnRoleType[\"annotation\"] = \"annotation\";\n  GoogleDataTableColumnRoleType[\"annotationText\"] = \"annotationText\";\n  GoogleDataTableColumnRoleType[\"certainty\"] = \"certainty\";\n  GoogleDataTableColumnRoleType[\"emphasis\"] = \"emphasis\";\n  GoogleDataTableColumnRoleType[\"interval\"] = \"interval\";\n  GoogleDataTableColumnRoleType[\"scope\"] = \"scope\";\n  GoogleDataTableColumnRoleType[\"style\"] = \"style\";\n  GoogleDataTableColumnRoleType[\"tooltip\"] = \"tooltip\";\n  GoogleDataTableColumnRoleType[\"domain\"] = \"domain\";\n})(GoogleDataTableColumnRoleType || (GoogleDataTableColumnRoleType = {}));\n\nvar Chart = Chart$1;\nexport { Chart$1 as Chart, GoogleDataTableColumnRoleType, Chart as default };","map":{"version":3,"mappings":"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","names":["useLoadScript","src","onLoad","onError","useEffect","document","foundScript","querySelector","concat","dataset","loaded","script","createElement","onLoadWithMarker","addEventListener","head","append","removeEventListener","useLoadGoogleCharts","param","chartVersion","chartPackages","chartLanguage","mapsApiKey","googleCharts","setGoogleCharts","useState","failed","setFailed","google","window","charts","load","packages","language","setOnLoadCallback","LoadGoogleCharts","params","chartDefaultProps","legend_toggle","options","legendToggle","getChartWrapper","spreadSheetQueryParameters","headers","gid","rootProps","chartWrapperParams","uniqueID","generateUniqueID","DEFAULT_CHART_COLORS","loadDataTableFromSpreadSheet","googleViz","spreadSheetUrl","urlParams","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlQueryString","urlToSpreadSheet","visualization","Query","send","response","isError","getMessage","getDetailedMessage","getDataTable","Provider","Consumer","React","createContext","ContextProvider","children","value","ContextConsumer","render","context","GRAY_COLOR","GoogleChartDataTableInner","Component","componentDidMount","draw","props","onResize","listenToLegendToggle","componentWillUnmount","googleChartWrapper","events","removeAllListeners","getChartType","getChart","clearChart","componentDidUpdate","state","hiddenColumns","addListener","chart","selection","getSelection","dataTable","length","row","columnIndex","column","columnID","getColumnID","includes","setState","filter","colID","applyFormatters","formatters","formatter","type","vizFormatter","ArrowFormat","format","BarFormat","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","getColumnId","getColumnLabel","data","diffdata","rows","columns","chartType","chartDiff","oldData","arrayToDataTable","old","newData","new","prototype","computeDiff","Array","isArray","DataTable","columnCount","getNumberOfColumns","i","previousColumnLabel","previousColumnID","previousColumnType","getColumnType","removeColumn","addColumn","label","id","setChartType","setOptions","setDataTable","googleChartDashboard","grayOutHiddenColumns","hasAHiddenColumn","colors","from","map","dontcare","GoogleChartDataTable","shouldComponentUpdate","Object","GoogleChartEvents","listenToEvents","chartEvents","event","eventName","callback","args","arguments","chartWrapper","eventArgs","propsFromContext","controlCounter","GoogleChart","toolbarItems","getChartEditor","chartConfig","containerId","getGraphID","ChartWrapper","Dashboard","dashboard_ref","googleChartControls","addControls","drawToolbar","toolbar_ref","current","googleChartEditor","ChartEditor","chartEditor","isReady","controls","controlType","controlWrapperParams","control","setControlType","nextProps","nextState","width","height","style","divStyle","div","ref","renderChart","renderControl","renderToolbar","renderToolBar","controlProp","controlPosition","graphID","createRef","graph_id","instanceGraphID","getControlID","index","controlID","controlIDMaybe","controlOptions","ControlWrapper","bind","chartControl","controlEvents","removeListener","controlWrapper","className","Fragment","_this1","key","getContainerId","Chart","loader","errorElement","loadingStatus","_isMounted","isFullyLoaded","onSuccess","setInterval","clearInterval","defaultProps","GoogleDataTableColumnRoleType","annotation","annotationText","certainty","emphasis","interval","scope","tooltip","domain"],"sources":["/Users/burakkaratas/first-try/node_modules/react-google-charts/src/hooks/useLoadScript.ts","/Users/burakkaratas/first-try/node_modules/react-google-charts/src/hooks/useLoadGoogleCharts.ts","/Users/burakkaratas/first-try/node_modules/react-google-charts/src/default-props.ts","/Users/burakkaratas/first-try/node_modules/react-google-charts/src/generate-unique-id.ts","/Users/burakkaratas/first-try/node_modules/react-google-charts/src/constants.ts","/Users/burakkaratas/first-try/node_modules/react-google-charts/src/load-data-table-from-spreadsheet.ts","/Users/burakkaratas/first-try/node_modules/react-google-charts/src/Context.tsx","/Users/burakkaratas/first-try/node_modules/react-google-charts/src/components/GoogleChartDataTable.tsx","/Users/burakkaratas/first-try/node_modules/react-google-charts/src/components/GoogleChartEvents.tsx","/Users/burakkaratas/first-try/node_modules/react-google-charts/src/components/GoogleChart.tsx","/Users/burakkaratas/first-try/node_modules/react-google-charts/src/ReactGoogleCharts.tsx","/Users/burakkaratas/first-try/node_modules/react-google-charts/src/types.ts","/Users/burakkaratas/first-try/node_modules/react-google-charts/src/index.tsx"],"sourcesContent":["import { useEffect } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(\n  src: string,\n  onLoad?: () => void,\n  onError?: () => void\n) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad?.();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad?.();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n","import { useState, useEffect } from \"react\";\nimport { GoogleChartVersion, GoogleChartPackages, GoogleViz } from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts({\n  chartVersion = \"current\",\n  chartPackages = [\"corechart\", \"controls\"],\n  chartLanguage = \"en\",\n  mapsApiKey,\n}: IUseLoadGoogleChartsParams) {\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [failed, setFailed] = useState(false);\n\n  useLoadScript(\n    \"https://www.gstatic.com/charts/loader.js\",\n    () => {\n      // @ts-expect-error Getting object from global namespace.\n      const google = window?.google as GoogleViz;\n\n      if (!google) {\n        return;\n      }\n\n      google.charts.load(chartVersion, {\n        packages: chartPackages,\n        language: chartLanguage,\n        mapsApiKey,\n      });\n      google.charts.setOnLoadCallback(() => {\n        setGoogleCharts(google);\n      });\n    },\n    () => {\n      setFailed(true);\n    }\n  );\n\n  return [googleCharts, failed] as const;\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nexport function LoadGoogleCharts({\n  onLoad,\n  onError,\n  ...params\n}: ILoadGoogleChartsProps) {\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n\n  return null;\n}\n","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\"\n];\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {}\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\n\nimport { ReactGoogleChartProps } from \"./types\";\nconst { Provider, Consumer } = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const ContextConsumer = ({\n  render,\n}: {\n  render: (context: ReactGoogleChartProps) => JSX.Element | null;\n}) => {\n  return (\n    <Consumer>\n      {(context) => {\n        return render(context as ReactGoogleChartProps);\n      }}\n    </Consumer>\n  );\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleDataTable,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n} from \"../types\";\nimport { DEFAULT_CHART_COLORS } from \"../constants\";\n\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ContextConsumer } from \"../Context\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type GoogleChartDataTableProps = {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  googleChartDashboard: GoogleChartDashboard | null;\n};\ninterface State {\n  hiddenColumns: string[];\n}\nexport class GoogleChartDataTableInner extends React.Component<\n  ReactGoogleChartProps & GoogleChartDataTableProps,\n  State\n> {\n  state = {\n    hiddenColumns: [],\n  } as State;\n\n  private listenToLegendToggle = () => {\n    const { google, googleChartWrapper } = this.props;\n    google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row ||\n          !dataTable\n        ) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [\n              ...state.hiddenColumns.filter((colID) => colID !== columnID),\n            ],\n          }));\n        } else {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID],\n          }));\n        }\n      }\n    );\n  };\n\n  private applyFormatters = (dataTable: GoogleDataTable, formatters: any[]) => {\n    const { google } = this.props;\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options\n          );\n          const { ranges } = formatter;\n          for (let range of ranges) {\n            vizFormatter.addRange(...range);\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n      }\n    }\n  };\n  private getColumnID = (dataTable: GoogleDataTable, columnIndex: number) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n  private draw = async ({\n    data,\n    diffdata,\n    rows,\n    columns,\n    options,\n    legend_toggle,\n    legendToggle,\n    chartType,\n    formatters,\n    spreadSheetUrl,\n    spreadSheetQueryParameters,\n  }: ReactGoogleChartProps) => {\n    const { google, googleChartWrapper } = this.props;\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData\n      );\n    }\n    if (data !== null) {\n      if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n    for (let i = 0; i < columnCount; i += 1) {\n      const columnID = this.getColumnID(dataTable, i);\n      if (this.state.hiddenColumns.includes(columnID)) {\n        const previousColumnLabel = dataTable.getColumnLabel(i);\n        const previousColumnID = dataTable.getColumnId(i);\n        const previousColumnType = dataTable.getColumnType(i);\n        dataTable.removeColumn(i);\n        dataTable.addColumn({\n          label: previousColumnLabel,\n          id: previousColumnID,\n          type: previousColumnType,\n        });\n      }\n    }\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    googleChartWrapper.setDataTable(dataTable);\n    googleChartWrapper.draw();\n    if (this.props.googleChartDashboard !== null) {\n      this.props.googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumns({ options });\n    }\n    return;\n  };\n  private grayOutHiddenColumns = ({\n    options,\n  }: {\n    options: ReactGoogleChartProps[\"options\"];\n  }) => {\n    const { googleChartWrapper } = this.props;\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      }\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  private onResize = () => {\n    const { googleChartWrapper } = this.props;\n    googleChartWrapper.draw();\n  };\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const { google, googleChartWrapper } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n}\n\nexport class GoogleChartDataTable extends React.Component<GoogleChartDataTableProps> {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const { google, googleChartWrapper, googleChartDashboard } = this.props;\n    return (\n      <ContextConsumer\n        render={(props) => {\n          return (\n            <GoogleChartDataTableInner\n              {...props}\n              google={google}\n              googleChartWrapper={googleChartWrapper}\n              googleChartDashboard={googleChartDashboard}\n            />\n          );\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  ReactGoogleChartEvent,\n} from \"../types\";\n\nimport { ContextConsumer } from \"../Context\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport interface Props {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n}\n\nexport interface ListenToEventsArgs {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  chartEvents: ReactGoogleChartEvent[] | null;\n}\n\nexport class GoogleChartEvents extends React.Component<Props> {\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents({\n    chartEvents,\n    google,\n    googleChartWrapper,\n  }: ListenToEventsArgs) {\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      const { eventName, callback } = event;\n      google.visualization.events.addListener(\n        googleChartWrapper,\n        eventName,\n        (...args: any[]) => {\n          callback({\n            chartWrapper: googleChartWrapper,\n            props: this.props as any,\n            google: google,\n            eventArgs: args,\n          });\n        }\n      );\n    }\n  }\n  render() {\n    const { google, googleChartWrapper } = this.props;\n    return (\n      <ContextConsumer\n        render={(propsFromContext) => {\n          this.listenToEvents({\n            chartEvents: propsFromContext.chartEvents || null,\n            google,\n            googleChartWrapper,\n          });\n          return null;\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\nimport { GoogleChartDataTable } from \"./GoogleChartDataTable\";\nimport { GoogleChartEvents } from \"./GoogleChartEvents\";\n\nexport type Props = {\n  google: GoogleViz;\n  graphID?: string | null;\n  graph_id?: string | null;\n  options?: ReactGoogleChartProps[\"options\"];\n  chartWrapperParams?: {};\n  chartType: ReactGoogleChartProps[\"chartType\"];\n  width?: ReactGoogleChartProps[\"width\"];\n  height?: ReactGoogleChartProps[\"height\"];\n  style?: ReactGoogleChartProps[\"style\"];\n  className?: ReactGoogleChartProps[\"className\"];\n  rootProps?: ReactGoogleChartProps[\"rootProps\"];\n} & ReactGoogleChartProps;\n\nexport interface State {\n  googleChartWrapper: GoogleChartWrapper | null;\n  isReady: boolean;\n  googleChartDashboard: GoogleChartDashboard | null;\n  googleChartEditor: GoogleChartEditor | null;\n  googleChartControls:\n    | { control: GoogleChartControl; controlProp: GoogleChartControlProp }[]\n    | null;\n}\n\nlet controlCounter = 0;\n\nexport class GoogleChart extends React.Component<Props, State> {\n  state = {\n    googleChartWrapper: null,\n    googleChartDashboard: null,\n    googleChartControls: null,\n    googleChartEditor: null,\n    isReady: false,\n  } as State;\n  graphID: null | string = null;\n  private dashboard_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private toolbar_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private getGraphID = () => {\n    const { graphID, graph_id } = this.props;\n    let instanceGraphID: string;\n    if (!graphID && !graph_id) {\n      if (!this.graphID) {\n        instanceGraphID = generateUniqueID();\n      } else {\n        instanceGraphID = this.graphID;\n      }\n    } else if (graphID && !graph_id) {\n      instanceGraphID = graphID as string;\n    } else if (graph_id && !graphID) {\n      instanceGraphID = graph_id as string;\n    } else {\n      instanceGraphID = graphID as string;\n    }\n    this.graphID = instanceGraphID;\n    return this.graphID as string;\n  };\n  private getControlID = (id: undefined | string, index: number) => {\n    controlCounter += 1;\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${index}-${controlCounter}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  addControls = (\n    googleChartWrapper: GoogleChartWrapper,\n    googleChartDashboard: GoogleChartDashboard\n  ) => {\n    const { google, controls } = this.props;\n\n    const googleChartControls = !controls\n      ? null\n      : controls.map((control, i) => {\n          const {\n            controlID: controlIDMaybe,\n            controlType,\n            options: controlOptions,\n            controlWrapperParams,\n          } = control;\n          const controlID = this.getControlID(controlIDMaybe, i);\n          return {\n            controlProp: control,\n            control: new google.visualization.ControlWrapper({\n              containerId: controlID,\n              controlType,\n              options: controlOptions,\n              ...controlWrapperParams,\n            }),\n          };\n        });\n    if (!googleChartControls) {\n      return null;\n    }\n    googleChartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      googleChartWrapper\n    );\n    for (let chartControl of googleChartControls) {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      for (let event of controlEvents) {\n        const { callback, eventName } = event;\n        google.visualization.events.removeListener(\n          control,\n          eventName,\n          callback\n        );\n        google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args: any[]) => {\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: this.props as any,\n              google: google,\n              eventArgs: args,\n            });\n          }\n        );\n      }\n    }\n    return googleChartControls;\n  };\n\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n    } = this.props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams,\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(\n      chartConfig\n    );\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(\n      this.dashboard_ref\n    );\n\n    const googleChartControls = this.addControls(\n      googleChartWrapper,\n      googleChartDashboard\n    );\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        this.toolbar_ref.current as HTMLDivElement,\n        toolbarItems\n      );\n    }\n    let googleChartEditor: null | GoogleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google,\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true,\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n\n    const { controls } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const { controlType, options, controlWrapperParams } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(\n            controlWrapperParams[\"state\"]\n          );\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      this.state.isReady !== nextState.isReady ||\n      nextProps.controls !== this.props.controls\n    );\n  }\n  renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div\n        id={this.getGraphID()}\n        style={divStyle}\n        className={className}\n        {...rootProps}\n      >\n        {this.state.isReady && this.state.googleChartWrapper !== null ? (\n          <React.Fragment>\n            <GoogleChartDataTable\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n              googleChartDashboard={this.state.googleChartDashboard}\n            />\n            <GoogleChartEvents\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n            />\n          </React.Fragment>\n        ) : null}\n      </div>\n    );\n  };\n  renderControl = (\n    filter = ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => true\n  ) => {\n    return this.state.isReady && this.state.googleChartControls !== null ? (\n      <React.Fragment>\n        {this.state.googleChartControls\n          .filter(({ controlProp, control }) => {\n            return filter({ control, controlProp });\n          })\n          .map(({ control, controlProp }) => {\n            return (\n              <div\n                key={control.getContainerId()}\n                id={control.getContainerId()}\n              />\n            );\n          })}\n      </React.Fragment>\n    ) : null;\n  };\n  renderToolBar = () => {\n    if (!this.props.toolbarItems) return null;\n    return <div ref={this.toolbar_ref} />;\n  };\n  render() {\n    const { width, height, options, style } = this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    if (this.props.render) {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          <div ref={this.toolbar_ref} id=\"toolbar\" />\n          {this.props.render({\n            renderChart: this.renderChart,\n            renderControl: this.renderControl,\n            renderToolbar: this.renderToolBar,\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition !== \"bottom\";\n          })}\n          {this.renderChart()}\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition === \"bottom\";\n          })}\n          {this.renderToolBar()}\n        </div>\n      );\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  ReactGoogleChartState,\n} from \"./types\";\nimport { LoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\nexport class Chart extends React.Component<\n  ReactGoogleChartProps,\n  ReactGoogleChartState\n> {\n  _isMounted = false;\n\n  state = {\n    loadingStatus: \"loading\" as ReactGoogleChartState[\"loadingStatus\"],\n    google: null as ReactGoogleChartState[\"google\"],\n  };\n\n  static defaultProps = chartDefaultProps;\n\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement,\n    } = this.props;\n    return (\n      <ContextProvider value={this.props as ReactGoogleChartProps}>\n        {this.state.loadingStatus === \"ready\" && this.state.google !== null ? (\n          <GoogleChart\n            {...(this.props as ReactGoogleChartProps)}\n            google={this.state.google}\n          />\n        ) : this.state.loadingStatus === \"errored\" && errorElement ? (\n          errorElement\n        ) : (\n          loader\n        )}\n        <LoadGoogleCharts\n          chartLanguage={chartLanguage}\n          chartPackages={chartPackages}\n          chartVersion={chartVersion}\n          mapsApiKey={mapsApiKey}\n          onLoad={this.onLoad}\n          onError={this.onError}\n        />\n      </ContextProvider>\n    );\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onLoad = (google: GoogleViz) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(google);\n    }\n    if (this.isFullyLoaded(google)) {\n      this.onSuccess(google);\n    } else {\n      // IE11: window.google is not fully set, we have to wait\n      const id = setInterval(() => {\n        const google = (\n          window as Window & {\n            google?: GoogleViz;\n          }\n        ).google;\n\n        if (this._isMounted) {\n          if (google && this.isFullyLoaded(google)) {\n            clearInterval(id);\n            this.onSuccess(google);\n          }\n        } else {\n          clearInterval(id);\n        }\n      }, 1000);\n    }\n  };\n\n  onSuccess = (google: GoogleViz) => {\n    this.setState({\n      loadingStatus: \"ready\",\n      google,\n    });\n  };\n\n  onError = () => {\n    this.setState({\n      loadingStatus: \"errored\",\n    });\n  };\n\n  isFullyLoaded(google: GoogleViz) {\n    const { controls, toolbarItems, getChartEditor } = this.props;\n\n    return (\n      google &&\n      google.visualization &&\n      google.visualization.ChartWrapper &&\n      google.visualization.Dashboard &&\n      (!controls || google.visualization.ChartWrapper) &&\n      (!getChartEditor || google.visualization.ChartEditor) &&\n      (!toolbarItems || google.visualization.drawToolbar)\n    );\n  }\n}\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[]\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: { dataSourceInput?: any; [otherKeyMaybe: string]: any }\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor: string;\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any\n  ) => any;\n  removeListener: (\n    chartWrapper: GoogleChartWrapper,\n    name: GoogleVizEventName,\n    callback: Function\n  ) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\";\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {}\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: string) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redFrom?: number;\n  redTo?: number;\n  yellowFrom?: number;\n  yellowTo?: number;\n  minorTicks?: number;\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (google: GoogleViz) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: {\n    column: number | number[];\n    type:\n      | \"ArrowFormat\"\n      | \"BarFormat\"\n      | \"ColorFormat\"\n      | \"DateFormat\"\n      | \"NumberFormat\"\n      | \"PatternFormat\";\n    options?: {};\n  }[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n","import { Chart } from \"./ReactGoogleCharts\";\n\nexport * from \"./types\";\nexport { Chart };\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}